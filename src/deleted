 



    #q1 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.01, 0.01, 0.01, 0.02, 0.02, 0.029999999999999999, 0.029999999999999999, 0.029999999999999999, 0.040000000000000001, 0.040000000000000001, 0.050000000000000003, 0.050000000000000003, 0.059999999999999998, 0.059999999999999998, 0.070000000000000007, 0.070000000000000007, 0.080000000000000002, 0.080000000000000002, 0.089999999999999997, 0.089999999999999997, 0.10000000000000001, 0.10000000000000001, 0.11, 0.11, 0.12, 0.12, 0.13, 0.13, 0.14000000000000001, 0.14000000000000001, 0.14999999999999999, 0.14999999999999999, 0.16, 0.16]
    #u1 = [8.4406054485615716, 7.1162225853751906, 5.9955672237176385, 5.0473128644743515, 4.2449499405342275, 3.5660451393853143, 2.991614616256379, 2.505593585380792, 2.0943874697636735, 1.7464920685777103, 1.4521721296654075, 1.2031893464641406, 0.99257217958862376, 0.81442107188626689, 0.66374361467445975, 0.5363150597047599, 0.42856027955856058, 0.33745387844791136, 0.26043566251746675, 0.19533910788797335, 0.14033082783855833, 0.093859347841014323, 0.054611757220652965, 0.021477026291198117, -0.0064850359554608755, -0.030070050926729638, -0.049951300231962516, -0.066698537310964187, -0.080793906485186889, -0.092645414209892266, -0.10259832891404204, -0.11094482793941092, -0.11793216111439202, -0.12376955905273122, -0.128634079195039, -0.13267555293148231, -0.13602077202822815, -0.13877703132643437, -0.14103512669673454]
    #q_nxt1 = [0.0, 0.00084406054485615725, 0.0023997433482498337, 0.0045549828740152742, 0.0072149536862281495, 0.010299419492494447, 0.013740489812699276, 0.017480721594529743, 0.02147151273489829, 0.025671742622243206, 0.030046621716445891, 0.03456671802361512, 0.039207133265430759, 0.043946805725205262, 0.048767920292168393, 0.053655409220598971, 0.058596529655000021, 0.063580506117356925, 0.068598227967558628, 0.073641993384012075, 0.078705292711254315, 0.083782625121280416, 0.088869343466090614, 0.093961522986622886, 0.099055850209784274, 0.10414952892935012, 0.10924020064382328, 0.11432587722827325, 0.11940488395899213, 0.12447581129906247, 0.12953747409771185, 0.13458887706346981, 0.13962918554643383, 0.14465770081328641, 0.14967383912423371, 0.1546771140272615, 0.15966712137499617, 0.164643526645528, 0.16960605421292718]




 #perfect model data

    #q = [0.0, 0.0, 0.0, 0.0, 0.0, 0.01, 0.01, 0.01, 0.02, 0.02, 0.029999999999999999, 0.029999999999999999, 0.029999999999999999, 0.040000000000000001, 0.040000000000000001, 0.050000000000000003, 0.050000000000000003, 0.059999999999999998, 0.059999999999999998, 0.070000000000000007, 0.070000000000000007, 0.080000000000000002, 0.080000000000000002, 0.089999999999999997, 0.089999999999999997, 0.10000000000000001, 0.10000000000000001, 0.11, 0.11, 0.12, 0.12, 0.13, 0.13, 0.14000000000000001, 0.14000000000000001, 0.14999999999999999, 0.14999999999999999, 0.16, 0.16]
    #u = [8.4406054485615716, 7.1162225853751906, 5.9955672237176385, 5.0473128644743515, 4.2449499405342275, 3.5660451393853143, 2.991614616256379, 2.505593585380792, 2.0943874697636735, 1.7464920685777103, 1.4521721296654075, 1.2031893464641406, 0.99257217958862376, 0.81442107188626689, 0.66374361467445975, 0.5363150597047599, 0.42856027955856058, 0.33745387844791136, 0.26043566251746675, 0.19533910788797335, 0.14033082783855833, 0.093859347841014323, 0.054611757220652965, 0.021477026291198117, -0.0064850359554608755, -0.030070050926729638, -0.049951300231962516, -0.066698537310964187, -0.080793906485186889, -0.092645414209892266, -0.10259832891404204, -0.11094482793941092, -0.11793216111439202, -0.12376955905273122, -0.128634079195039, -0.13267555293148231, -0.13602077202822815, -0.13877703132643437, -0.14103512669673454]
    #q_nxt = [0.0, 0.00084406054485615725, 0.0023997433482498337, 0.0045549828740152742, 0.0072149536862281495, 0.010299419492494447, 0.013740489812699276, 0.017480721594529743, 0.02147151273489829, 0.025671742622243206, 0.030046621716445891, 0.03456671802361512, 0.039207133265430759, 0.043946805725205262, 0.048767920292168393, 0.053655409220598971, 0.058596529655000021, 0.063580506117356925, 0.068598227967558628, 0.073641993384012075, 0.078705292711254315, 0.083782625121280416, 0.088869343466090614, 0.093961522986622886, 0.099055850209784274, 0.10414952892935012, 0.10924020064382328, 0.11432587722827325, 0.11940488395899213, 0.12447581129906247, 0.12953747409771185, 0.13458887706346981, 0.13962918554643383, 0.14465770081328641, 0.14967383912423371, 0.1546771140272615, 0.15966712137499617, 0.164643526645528, 0.16960605421292718]






#with open('test.csv', 'w', newline='') as fp:
     #   a = csv.writer(fp, delimiter=',')
      #  data1 = [
       #         [293, 219],
        #        [54, 13]]
        #a.writerows(data1)

    #data = loadtxt('test.csv', delimiter=',')



    #print(X)

    #Represent data we want to predict
    #in out case q_nxt


    #imperfect model data - 100 points which didn't reach target
    #q = [0.0, 0.02, 0.040000000000000001, 0.040000000000000001, 0.050000000000000003, 0.070000000000000007, 0.040000000000000001, 0.070000000000000007, 0.089999999999999997, 0.080000000000000002, 0.10000000000000001, 0.089999999999999997, 0.089999999999999997, 0.080000000000000002, 0.080000000000000002, 0.089999999999999997, 0.080000000000000002, 0.089999999999999997, 0.089999999999999997, 0.10000000000000001, 0.10000000000000001, 0.089999999999999997, 0.11, 0.10000000000000001, 0.11, 0.12, 0.14000000000000001, 0.13, 0.16, 0.14999999999999999, 0.17000000000000001, 0.17999999999999999, 0.17999999999999999, 0.19, 0.19, 0.20000000000000001, 0.19, 0.20999999999999999, 0.20999999999999999, 0.20000000000000001, 0.22, 0.22, 0.20999999999999999, 0.23000000000000001, 0.23999999999999999, 0.23999999999999999, 0.23999999999999999, 0.25, 0.25, 0.25, 0.26000000000000001, 0.26000000000000001, 0.27000000000000002, 0.28000000000000003, 0.29999999999999999, 0.29999999999999999, 0.29999999999999999, 0.28000000000000003, 0.28000000000000003, 0.28000000000000003, 0.29999999999999999, 0.29999999999999999, 0.29999999999999999, 0.29999999999999999, 0.29999999999999999, 0.29999999999999999, 0.28999999999999998, 0.28000000000000003, 0.28000000000000003, 0.29999999999999999, 0.31, 0.32000000000000001, 0.32000000000000001, 0.33000000000000002, 0.35999999999999999, 0.37, 0.35999999999999999, 0.37, 0.38, 0.37, 0.38, 0.37, 0.35999999999999999, 0.35999999999999999, 0.37, 0.35999999999999999, 0.37, 0.37, 0.38, 0.40000000000000002, 0.39000000000000001, 0.40000000000000002, 0.40000000000000002, 0.40000000000000002, 0.40999999999999998, 0.42999999999999999, 0.40999999999999998, 0.41999999999999998, 0.44]
    #u = [8.4406054485615716, 6.8769867199972614, 5.5536708232371819, 4.6562507213980977, 3.8079629210057298, 3.0754979102968827, 2.5646408145549535, 2.0279787713770832, 1.5926680006091369, 1.4206493768218167, 1.1789333906435373, 1.2922869196467426, 1.290711578479665, 1.2864531616569959, 1.0928981613442668, 0.99662403844088643, 0.9790676342009409, 1.0517279612709192, 0.79436128342461609, 0.52910036734775923, 0.51432227977578693, 0.39364822524959742, 0.051055078351792578, 0.13402484645272522, 0.022832977973822617, -0.025484080753804483, 0.063204996260521687, 0.15134250884566908, -0.28273403997002627, -0.17910345068317957, -0.31763602643534761, -0.35736459358466915, -0.22369970116075227, -0.12394824385115025, 0.0045643588923267803, -0.10953501769925289, -0.069965683397994236, -0.053842258496426834, 0.005940279657798397, 0.033573140580857877, 0.13164160998797467, -0.036705259110271102, 0.16282111502996627, -0.087370716694710457, 0.024877339391087092, 0.10915165371485104, 0.18830936272030271, 0.28053349341891537, 0.4543046011916605, 0.28163989565731457, -0.16168646046707325, -0.31413545670164794, -0.31495797464026853, -0.44517302747785709, -0.28780249327191515, -0.61989243441571662, -0.4269275791319318, -0.33306934437266372, -0.050607874389868267, 0.14359126412140888, -0.039548436145425851, -0.003266096196912541, -0.19073268881265815, -0.22562791018278552, -0.32817423891657826, -0.01498003945326307, 0.11708389439229372, 0.088509300961026008, 0.0052610720775982094, -0.0091457529239726588, 0.26656015713392861, 0.31848798473822937, 0.39889673909207701, 0.38189709862331678, 0.21226704821623799, 0.21715201554551186, 0.24490668622256145, 0.36437889972344439, 0.2753539495651926, 0.32764292569154935, 0.26852145114033404, 0.19835879130545803, 0.22810452683459553, 0.088888434623917434, 0.43579285708519799, 0.54078082468560251, 0.49361604715623353, 0.47595993287789168, 0.47464797846166784, 0.41811742919002981, 0.4982793437180611, 0.22099717185112552, 0.19768981246958436, 0.116052202351046, 0.02976592741040076, 0.0068704166644160446, 0.42316632116618375, 0.49146227655588753, 0.22719037820500071]
    #q_nxt = [0.017738397258087218, 0.037450920344606183, 0.038157778040805709, 0.04810695491200901, 0.065883477105623339, 0.043656550321307344, 0.069969193577968047, 0.08918404156236244, 0.084361246589076219, 0.10083975001768844, 0.094501254906972212, 0.093544381432469736, 0.081584733335749587, 0.080782265273934326, 0.085818233918437084, 0.083492401049278631, 0.089602076649564696, 0.085035323003118654, 0.10108096680618289, 0.097072913147125031, 0.090220808852760237, 0.11007203508927856, 0.1043322603005631, 0.11142350365527429, 0.1165630911303407, 0.1403044201667103, 0.13343909787522437, 0.15772750629535259, 0.15416257151391938, 0.16871554779380829, 0.17757217317986829, 0.17564358569924263, 0.18727089631925198, 0.18534597818460927, 0.19595750066957077, 0.18590766284675328, 0.21449961297531692, 0.20608722052125367, 0.20337112447352906, 0.21925478303007859, 0.21899005725339066, 0.21136444342158395, 0.22796189805806899, 0.24116021871738247, 0.23770184629390942, 0.23867575729329576, 0.24934239874691744, 0.24625064097165381, 0.25024206599342341, 0.26260597876465192, 0.26369829759347374, 0.27486514880420931, 0.28248953508954044, 0.2950520145824731, 0.29976242390802288, 0.29500844752046751, 0.28435961240374863, 0.28296048789301087, 0.28195698413414011, 0.3013645056659891, 0.29945388256605554, 0.30093877834403682, 0.29743194109847287, 0.30352835868438449, 0.3007684142217007, 0.29328340213807574, 0.27837507567226411, 0.27977229857193608, 0.30378111634295712, 0.31296568646539269, 0.3160373126819408, 0.32299991303883518, 0.33396629819466428, 0.36109996338582628, 0.36616995608423347, 0.35720684088844767, 0.36786111438474844, 0.37880040910028684, 0.37153166411041072, 0.37513083544994319, 0.37201589334520507, 0.36453452797757402, 0.36167426715584011, 0.37335043209557833, 0.35967564918060208, 0.37421966161776871, 0.37368696246687877, 0.38332165182852851, 0.40079881132720846, 0.38619945605974254, 0.39715036436524692, 0.40099064264866607, 0.40236055056688785, 0.41484882497419767, 0.42534484624401908, 0.41220408483868948, 0.41633282311398234, 0.43665565085285074, 0.43698277427345239]

    #perfect model - show
    #q = [0.0, 0.0, 0.0, 0.0, 0.0, 0.01, 0.01, 0.01, 0.02, 0.02, 0.029999999999999999, 0.029999999999999999, 0.029999999999999999, 0.040000000000000001, 0.040000000000000001, 0.050000000000000003, 0.050000000000000003, 0.059999999999999998, 0.059999999999999998, 0.070000000000000007, 0.070000000000000007, 0.080000000000000002, 0.080000000000000002, 0.089999999999999997, 0.089999999999999997, 0.10000000000000001, 0.10000000000000001, 0.11, 0.11, 0.12, 0.12, 0.13, 0.13, 0.14000000000000001, 0.14000000000000001, 0.14999999999999999, 0.14999999999999999, 0.16, 0.16]
    #u = [8.4406054485615716, 7.1162225853751906, 5.9955672237176385, 5.0473128644743515, 4.2449499405342275, 3.5660451393853143, 2.991614616256379, 2.505593585380792, 2.0943874697636735, 1.7464920685777103, 1.4521721296654075, 1.2031893464641406, 0.99257217958862376, 0.81442107188626689, 0.66374361467445975, 0.5363150597047599, 0.42856027955856058, 0.33745387844791136, 0.26043566251746675, 0.19533910788797335, 0.14033082783855833, 0.093859347841014323, 0.054611757220652965, 0.021477026291198117, -0.0064850359554608755, -0.030070050926729638, -0.049951300231962516, -0.066698537310964187, -0.080793906485186889, -0.092645414209892266, -0.10259832891404204, -0.11094482793941092, -0.11793216111439202, -0.12376955905273122, -0.128634079195039, -0.13267555293148231, -0.13602077202822815, -0.13877703132643437, -0.14103512669673454]
    #q_nxt = [0.0, 0.00084406054485615725, 0.0023997433482498337, 0.0045549828740152742, 0.0072149536862281495, 0.010299419492494447, 0.013740489812699276, 0.017480721594529743, 0.02147151273489829, 0.025671742622243206, 0.030046621716445891, 0.03456671802361512, 0.039207133265430759, 0.043946805725205262, 0.048767920292168393, 0.053655409220598971, 0.058596529655000021, 0.063580506117356925, 0.068598227967558628, 0.073641993384012075, 0.078705292711254315, 0.083782625121280416, 0.088869343466090614, 0.093961522986622886, 0.099055850209784274, 0.10414952892935012, 0.10924020064382328, 0.11432587722827325, 0.11940488395899213, 0.12447581129906247, 0.12953747409771185, 0.13458887706346981, 0.13962918554643383, 0.14465770081328641, 0.14967383912423371, 0.1546771140272615, 0.15966712137499617, 0.164643526645528, 0.16960605421292718]

    #for the plots
    #10 points for imperfect data - taken off working
    #q = [0.0, 1.76, 5.42, 10.79, 22.44, 46.52, 90.7, 183.96, 369.78, 738.88]
    #u = [8.4406054485507465, -18.084479618277236, -62.97193280557255, -116.66326291895726, -216.24589925514084, -385.91560186873505, -661.44554287405299, -1136.8688319686166, -1936.8298374940005, -3265.534353839234]
    #q_nxt = [1.764052345967664, 5.4186136839468304, 10.791678496326373, 22.437426776553266, 46.517208703258525, 90.697742739002706, 183.96079288186218, 369.78180749101756, 738.87906567600101, 1478.6132047379374]

    #Try this and then plot
    #What this will look like

    #y
    #u_y
    #y_nxt

    #Then try with the disturbed data



    #data1 = [100]

    #for index in range(len(q)):
     #  temp = [q[index],u[index]]
      # data1.append(temp)
       #data.append()
       #zs = q_nxt[index]

    #print(data1)



    # print(len(q))
    # print(len(q_nxt))
    # print(len(u))

    # #Plot the data

    # fig = plt.figure()
    # ax = fig.add_subplot(111, projection='3d')
    # n = 100
    # for c, m, zl, zh in [('r', 'o', -50, -25)]:
        
    # for index in range(len(q)):
    #    xs = q[index]
    #    ys = u[index]
    #    zs = q_nxt[index]
    #    ax.scatter(xs, ys, zs)#, c=c, marker=m)



    # ax.set_xlabel('Q')
    # ax.set_ylabel('U')
    # ax.set_zlabel('Q_NXT')

    # plt.show()




    #Format is strange as it dows power bt its everything from first to second in data columns
    #change this so that it is two we pass in so q, u 
    #write out to a csv file then read back in 






























initial real data x
1.549999999999999989, 4.299999999999999933e-01, 2.599999999999999881e-02,
1.600000000000000033, 3.400000000000000244e-01, 2.999999999999999889e-02,
1.650000000000000078, 2.600000000000000089e-01, 3.500000000000000333e-02,
1.700000000000000122, 2.000000000000000111e-01, 3.899999999999999994e-02,
1.749999999999999889, 1.400000000000000133e-01, 4.399999999999999745e-02,
1.789999999999999925, 8.999999999999999667e-02, 4.900000000000000189e-02,
1.839999999999999969, 5.000000000000000278e-02, 5.399999999999999689e-02,
1.890000000000000013, 2.000000000000000042e-02, 5.899999999999999689e-02,
1.940000000000000058, -1.000000000000000021e-02, 6.400000000000000133e-02,
1.990000000000000102e-01, -2.999999999999999889e-02, 6.900000000000000577e-02,
2.039999999999999869e-01, -5.000000000000000278e-02, 7.399999999999999634e-02,




initial data collected for position
0.0,8.4406054485615716,0.017
0.02,6.8769867199972614,0.037
0.040000000000000001,5.55,0.038
0.040000000000000001,4.65,0.048
0.050000000000000003,3.80,0.065
0.070000000000000007,3.07,0.043
0.040000000000000001,2.56,0.069
0.070000000000000007,2.02,0.089
0.089999999999999997,1.59,0.084
0.080000000000000002,1.42,0.100
0.10000000000000001,1.17,0.094
0.089999999999999997,1.29,0.0935
0.089999999999999997,1.29,0.081




#This creates a graph which is larger for the viewer
#plt.figure(1, figsize=(15,15))
#plt.ion()
#plt.show(False)

#solve the problem of accounting for noise with linear regression
#Pass paramters A?,B?, u, x in for loop of execution

def linearRegression(q,u,dynamics):

    #x,y,dx,dy
    #print("x","y","dx","dy")

    #save data to a file but in real life 

    #print(q, u)
    A = dynamics.A
    B = dynamics.B
    u = 0
    m = 0
    x = 0

    #compute the next state of x
    #x_nxt = (A * x) + (B * u) #Add non linear term + no(x,u)
    #compute the plane that it will show the line of best fit with m and b
    #p = (m * x) + (B * u) #???? + c

    #add derivative of m and b to iteratvely update?
    #iterate over X and u, do I need to update A and B also from data?

    #this will return the margin of error 
    #sum (p) - (A*x[i] + B*u[i] - x_nxt)^2 
    
    #call the draw function to draw plotted points and maybe show the error if possible 











end of toy_example.py
    #np.savetxt("foo.csv", a, delimiter=",")
    #np.savetxt('q_new.txt', q_array);
    #np.savetxt('q_new_nxt.txt', q_nxt_array);
    #np.savetxt('u_new.txt', u_array);

   #print q_nxt

    '''
    
    this is the actual case and will show show that the computed control wont take the system to the goal 
    due to the presence of non linear term
    '''

    # q_nxt, dq_nxt = dynamics(q=q, dq=dq, u=u, disturb=True)

    # print "Error in q \t", abs(q_nxt-qf)
    # print "Error in dq \t", abs(dq_nxt-dqf)

    # correction_dynamics = collect_data_and_learn_correction()


    # u = compute_ctrl(q, dq, qf, dqf, dynamics, correction_dynamics)

    # '''
    # this is the corrected case and will show show that the computed control wont take the system to the goal 
    # due to the presence of non linear term
    # '''

    # q_nxt, dq_nxt = dynamics(q=q, dq=dq, u=u, disturb=True)

    # print "Error in q \t", abs(q_nxt-qf)
    # print "Error in dq \t", abs(dq_nxt-dqf)

   #raw_input("Press enter to exit...")
