'''
Install SCIPY library to make this code work
pip install scipy
'''
from numpy import loadtxt, zeros, ones, array, linspace, logspace, mean, std, arange
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
from pylab import plot, show, xlabel, ylabel
import csv
import numpy as np
import scipy.linalg as la
import matplotlib.pyplot as plt

#This makes the random numbers predictable
np.random.seed(0)

'''
This funciton implements a discretized lqr controller
it takes in system matrix A, the control matrix B
The state penalization Q, and the control penalization R
It formualates the ricatti equation and solves it
Don't understand the materials given in the doc folder
'''

def dlqr(A, B, Q, R):
    """Solve the discrete time lqr controller.
    x[k+1] = A x[k] + B u[k]     
    cost = sum x[k].T*Q*x[k] + u[k].T*R*u[k]
    """
    #ref Bertsekas, p.151
    #first, try to solve the ricatti equation
    X = la.solve_discrete_are(A, B, Q, R)
    #compute the LQR gain
    K = la.pinv( np.dot( (np.dot(np.dot(B.T, X), B) + R) , np.dot(np.dot(B.T, X), A) ).T )
    eigVals, eigVecs = la.eig( A - np.dot(B,K) )
    return K, eigVals


'''
This is a class that encapsulates the dynamics of a point mass object.
It has the A matrix, B matrix 
It also has an option to compute the non_linear_term when a configuration is passed
the compute_nxt_state funciton computes the next state if the current state and control is passed
the state q = [x, y, dx, dy]
the control  u = [Fx, Fy]
'''

class Dynamics():

    def __init__(self, dt=0.01):
        '''
        the system matrix
        '''
        self.A = np.array([[1.,0.,dt, 0.],
                           [0.,1.,0., dt],
                           [0.,0.,1., 0.],
                           [0.,0.,0., 1.]])
        '''
        the control matrix
        '''
        self.B = np.array([[0., 0.],
                           [0., 0.],
                           [dt, 0.],
                           [0., dt]])

    
    def non_linear_term(self, q):
        #print(q)
        return q + np.random.randn(4)


    def compute_nxt_state(self, q, u, disturb=False):
        
        q = np.dot(self.A, q) + np.dot(self.B, u)

        if disturb:
            q += self.non_linear_term(q)

        return q



def compute_ctrl(q0, qf, dynamics, correction_dynamics=None):
    '''
    find a control command using the start, final and the dynamics
    at present it is not doing anything, just returning a random control input
    so initially the correction dyanmics is none and later it learns it
    The state penalization Q, and the control penalization R
    '''
    Q = np.array([[1.,0.,0.,0.],
                  [0.,1.,0.,0.],
                  [0.,0.,10.,0.],
                  [0.,0.,0.,10.]])
    R = np.eye(2)*0.06

    K, eigVals = dlqr(dynamics.A, dynamics.B, Q, R)

    if correction_dynamics is not None:
        '''
        add the corrected dyanmics to the computed dyanmics
        '''
        pass

   #print "U \n", np.dot(-K, (q0-qf))
    #print(np.dot(-K, (q0-qf)))

    return np.dot(-K, (q0-qf))


def collect_data_and_learn_correction(dynamics, total_data_points=100):
    
    for k in range(total_data_points):

        u = compute_ctrl(q, qf, dynamics)

        q_nxt = dynamics.compute_nxt_state(q=q, u=u, disturb=True)

        data.append(np.r_[q, u, q_nxt])
        q_array.append(q)
        u_array.append(u)
        q_nxt_array.append(q_nxt)

        q = q_nxt

    np.savetxt('q.txt', q_array)
    np.savetxt('q_nxt.txt', q_nxt_array)
    np.savetxt('u.txt', u_array)
    #np.savetxt('data.txt', data)

    '''
    implement some method that will use this data to learn the correction model
    for example, 
    '''

    return correction_dynamics


def visualize(start, goal, point_mass_trajectory, error_list):
    plt.clf()
    plt.subplot(221)
    plt.scatter(start[0], start[1], color='r')
    plt.scatter(goal[0],  goal[1],  color='g')

    plt.plot(point_mass_trajectory[0,:], point_mass_trajectory[1,:], color='b')
    plt.xlim([-0.1, 1.])
    plt.ylim([-0.1, 1.])
    plt.xlabel("X location")
    plt.ylabel("Y location")

    plt.subplot(222)
    plt.plot(error_list, color='m')
    plt.xlabel("time steps")
    plt.ylabel("error magnitude")

    plt.subplot(223)
    plt.plot(point_mass_trajectory[2,:], color='r')
    plt.xlabel("time steps")
    plt.ylabel("x velocity magnitude")

    plt.subplot(224)
    plt.plot(point_mass_trajectory[3,:], color='g')
    plt.xlabel("time steps")
    plt.ylabel("y velocity magnitude")

    plt.draw()
    plt.pause(0.0001)


#Evaluate the linear regression

def feature_normalize(X):
    '''
    Returns a normalized version of X where
    the mean value of each feature is 0 and the standard deviation
    is 1. This is often a good preprocessing step to do when
    working with learning algorithms.
    '''
    mean_r = []
    std_r = []

    X_norm = X

    n_c = X.shape[1]
    for i in range(n_c):
        m = mean(X[:, i])
        #print(m, X)
        s = std(X[:, i])
        mean_r.append(m)
        std_r.append(s)
        X_norm[:, i] = (X_norm[:, i] - m) / s

    return X_norm, mean_r, std_r


def compute_cost(X, y, theta):
    '''
    Comput cost for linear regression
    '''
    #Number of training samples
    m = y.size
    predictions = X.dot(theta)
    sqErrors = (predictions - y)
    J = (1.0 / (2 * m)) * sqErrors.T.dot(sqErrors)
    return J


def gradient_descent(X, y, theta, alpha, num_iters):
    '''
    Performs gradient descent to learn theta
    by taking num_items gradient steps with learning
    rate alpha
    '''
    m = y.size
    J_history = zeros(shape=(num_iters, 1))

    for i in range(num_iters):
        predictions = X.dot(theta)
        theta_size = theta.size
        for it in range(theta_size):
            temp = X[:, it]
            temp.shape = (m, 1)
            errors_x1 = (predictions - y) * temp 
            theta[it][0] = theta[it][0] - alpha * (1.0 / m) * errors_x1.sum()
        J_history[i, 0] = compute_cost(X, y, theta)

    return theta, J_history

#Load the dataset - data main object working on 
#current state, u, next state

#start LR

def learn(file,fileError,param):
    #file = 'datarealX.txt'
    data = loadtxt(file, delimiter=',')
    #data = loadtxt('datarealY.txt', delimiter=',')

    #come from fileError
    #p = data[:, :2]
    # q1 = data[:, 0]
    # u1 = data[:, 1]
    # q_nxt1 = data[:, 2]
    print(param)

    X = data[:, :2]
    y = data[:, 2]
    #print(y)
    #number of training samples
    m = y.size
    y.shape = (m, 1)
    #Scale features and set them to zero mean ??
    x, mean_r, std_r = feature_normalize(X)
    #print(x)
    #x data is between 0-1 more or less
    #This just adds ones as a best practice technique so0 indexed
    #Add a column of ones to X (interception data)
    it = ones(shape=(m, 3))
    it[:, 1:3] = x
    #print(x)

    #Some gradient descent settings
    iterations = 100
    #origninal alpha 0.01
    alpha = 0.5

    #Init Theta and Run Gradient Descent
    theta = zeros(shape=(3, 1))
    #Printing gradient descent running
    theta, J_history = gradient_descent(it, y, theta, alpha, iterations)

    #theta is a 3 dimensional array which holds the theta value from gradient descent 
    #J history is the history of gradient descent
    #print(theta)

    #prints the cost function - highlight this in report
    #print(theta, J_history)
    #plot(arange(iterations), J_history)
    #xlabel('Iterations')
    #ylabel('Cost Function')
    #show()

    #How does it predict
    #This will be where the real data goes in with errors
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    n = 100

    #100 points which reaches the target
    #q1 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.01, 0.01, 0.01, 0.02, 0.02, 0.029999999999999999, 0.029999999999999999, 0.029999999999999999, 0.040000000000000001, 0.040000000000000001, 0.050000000000000003, 0.050000000000000003, 0.059999999999999998, 0.059999999999999998, 0.070000000000000007, 0.070000000000000007, 0.080000000000000002, 0.080000000000000002, 0.089999999999999997, 0.089999999999999997, 0.10000000000000001, 0.10000000000000001, 0.11, 0.11, 0.12, 0.12, 0.13, 0.13, 0.14000000000000001, 0.14000000000000001, 0.14999999999999999, 0.14999999999999999, 0.16, 0.16, 0.17000000000000001, 0.17000000000000001, 0.17999999999999999, 0.17999999999999999, 0.19, 0.19, 0.20000000000000001, 0.20000000000000001, 0.20999999999999999, 0.20999999999999999, 0.22, 0.22, 0.23000000000000001, 0.23000000000000001, 0.23999999999999999, 0.23999999999999999, 0.25, 0.25, 0.26000000000000001, 0.26000000000000001, 0.27000000000000002, 0.27000000000000002, 0.28000000000000003, 0.28000000000000003, 0.28000000000000003, 0.28999999999999998, 0.28999999999999998, 0.29999999999999999, 0.29999999999999999, 0.31, 0.31, 0.32000000000000001, 0.32000000000000001, 0.33000000000000002, 0.33000000000000002, 0.33000000000000002, 0.34000000000000002, 0.34000000000000002, 0.34999999999999998, 0.34999999999999998, 0.35999999999999999, 0.35999999999999999, 0.35999999999999999, 0.37, 0.37, 0.38, 0.38, 0.39000000000000001, 0.39000000000000001, 0.39000000000000001, 0.40000000000000002, 0.40000000000000002, 0.40999999999999998, 0.40999999999999998, 0.41999999999999998, 0.41999999999999998, 0.41999999999999998, 0.42999999999999999, 0.42999999999999999, 0.44]
    #u1 = [8.4406054485615716, 7.1162225853751906, 5.9955672237176385, 5.0473128644743515, 4.2449499405342275, 3.5660451393853143, 2.991614616256379, 2.505593585380792, 2.0943874697636735, 1.7464920685777103, 1.4521721296654075, 1.2031893464641406, 0.99257217958862376, 0.81442107188626689, 0.66374361467445975, 0.5363150597047599, 0.42856027955856058, 0.33745387844791136, 0.26043566251746675, 0.19533910788797335, 0.14033082783855833, 0.093859347841014323, 0.054611757220652965, 0.021477026291198117, -0.0064850359554608755, -0.030070050926729638, -0.049951300231962516, -0.066698537310964187, -0.080793906485186889, -0.092645414209892266, -0.10259832891404204, -0.11094482793941092, -0.11793216111439202, -0.12376955905273122, -0.128634079195039, -0.13267555293148231, -0.13602077202822815, -0.13877703132643437, -0.14103512669673454, -0.14287189201210826, -0.14435234602212896, -0.14553150911225904, -0.14645594070845205, -0.14716504028212943, -0.14769214830562638, -0.14806547791879143, -0.14830890333750446, -0.14844262703224972, -0.14848374431771019, -0.14844672112802137, -0.14834379832672401, -0.14818533384782642, -0.14798009222741726, -0.14773548961532523, -0.1474578011124639, -0.14715233622685803, -0.14682358735060685, -0.14647535540621448, -0.14611085617286401, -0.14573281026338208, -0.14534351926585232, -0.14494493017728038, -0.14453868992958177, -0.1441261915313585, -0.14370861311465319, -0.14328695097766617, -0.14286204754663093, -0.14243461503812338, -0.14200525548291146, -0.14157447767083117, -0.14114271149011376, -0.14071032006181911, -0.14027761000840488, -0.13984484014333751, -0.13941222882453672, -0.13897996017710904, -0.13854818935923141, -0.13811704701831962, -0.13768664306198555, -0.13725706984914421, -0.13682840489043391, -0.13640071313339744, -0.13597404889627684, -0.13554845750445077, -0.13512397667523482, -0.13470063768974791, -0.13427846638457194, -0.13385748399092934, -0.13343770784481351, -0.13301915198791953, -0.13260182767616988, -0.13218574381003581, -0.13177090729868823, -0.13135732336814465, -0.13094499582203195, -0.13053392726224103, -0.13012411927565273, -0.12971557259214003, -0.12930828721827509]
    #q_nxt1 = [0.0, 0.00084406054485615725, 0.0023997433482498337, 0.0045549828740152742, 0.0072149536862281495, 0.010299419492494447, 0.013740489812699276, 0.017480721594529743, 0.02147151273489829, 0.025671742622243206, 0.030046621716445891, 0.03456671802361512, 0.039207133265430759, 0.043946805725205262, 0.048767920292168393, 0.053655409220598971, 0.058596529655000021, 0.063580506117356925, 0.068598227967558628, 0.073641993384012075, 0.078705292711254315, 0.083782625121280416, 0.088869343466090614, 0.093961522986622886, 0.099055850209784274, 0.10414952892935012, 0.10924020064382328, 0.11432587722827325, 0.11940488395899213, 0.12447581129906247, 0.12953747409771185, 0.13458887706346981, 0.13962918554643383, 0.14465770081328641, 0.14967383912423371, 0.1546771140272615, 0.15966712137499617, 0.164643526645528, 0.16960605421292718, 0.17455447826765669, 0.17948861513318498, 0.18440831676411107, 0.18931346524412593, 0.19420396813006996, 0.19907975451198576, 0.20394077167907101, 0.20878698229836437, 0.21361836202732398, 0.21843489749358039, 0.22323658458540502, 0.22802342700511682, 0.23279543504499597, 0.23755262455149034, 0.24229501604876197, 0.24702263399707206, 0.25173550616527091, 0.25643366309984705, 0.26111713767568817, 0.26578596471598864, 0.27044018067067183, 0.27507982334432868, 0.27970493166605892, 0.28431554549477145, 0.28891170545449102, 0.29349345279505745, 0.29806082927431243, 0.30261387705846965, 0.30715263863787218, 0.3116771567557709, 0.31618747434812133, 0.32068363449270471, 0.32516568036613908, 0.32963365520756727, 0.33408760228799461, 0.33852756488440761, 0.34295358625793815, 0.34736570963545099, 0.35176397819402788, 0.35614843504790294, 0.36051912323747182, 0.36487608572005575, 0.36921936536215066, 0.37354900493293225, 0.37786504709882418, 0.38216753441896567, 0.38645650934143966, 0.39073201420014464, 0.39499409121221118, 0.39924278247587863, 0.40347812996876159, 0.40770017554644578, 0.41190896094136237, 0.41610452776189794, 0.4202869174917036, 0.42445617148917247, 0.42861233098705914, 0.43275543709221959, 0.43688553078545245, 0.4410026529214261]
    x_nxt_new = []

    #points with wrong dynamics 
    #q1 = [0.0, 1.76, 5.42, 10.79, 22.44, 46.52, 90.7, 183.96, 369.78, 738.88]#, 1478.61, 2954.11, 5901.35, 11784.62, 23529.55, 46970.33]# 93744.76, 187069.73, 373249.3, 744638.94, 1485418.33, 2962890.57, 5909516.53, 11785880.73, 23504446.63, 46872620.01, 93470054.63, 186385543.95, 371655428.8, 741069590.52, 1477642036.98, 2946269474.35, 5874484189.0, 11712833177.41, 23353387522.26, 46562272972.44, 92835775160.58, 185094681394.41, 369037316956.69, 735774509699.86, 1466957686316.04, 2924752182690.22, 5831219695431.59, 11625958082842.18, 23179137309516.17, 46213097233505.68, 92136621589713.75, 183695696292488.03, 366239554187682.3, 730182036439337.8, 1455783291114475.2, 2902431987116627.0, 5786649106796036.0, 1.1536977722988988e+16, 2.3001533857890548e+16, 4.585866464009489e+16, 9.142940512205373e+16, 1.822847280862244e+17, 3.6342482613191904e+17, 7.24567460623784e+17, 1.4445846678375122e+18, 2.880097063117002e+18, 5.742105979385889e+18, 1.144814828860433e+19, 2.2824394083260957e+19, 4.550543197823368e+19, 9.072504723870823e+19, 1.8088024822068553e+20, 3.606243695764118e+20, 7.189835985823773e+20, 1.433451104871541e+21, 2.857898325927501e+21, 5.697845328646903e+21, 1.1359900580121904e+22, 2.264844549644279e+22, 4.515462733635396e+22, 9.002562005919204e+22, 1.7948575096974473e+23, 3.578440731028107e+23, 7.134403659790023e+23, 1.42239928333156e+24, 2.835863806773372e+24, 5.653914195730959e+24, 1.1272313414092992e+25, 2.247381989874213e+25, 4.48064706075554e+25, 8.933148941265311e+25, 1.7810184286144585e+26, 3.5508493806741605e+26, 7.079394073890121e+26, 1.41143188654727e+27, 2.813997847609154e+27, 5.610319531518841e+27, 1.1185397761680534e+28, 2.2300534277518025e+28, 4.446098739035824e+28, 8.864269233947462e+28, 1.767285740563234e+29, 3.523470243857426e+29]
    #u1 = [8.4406054485507465, -18.084479618277236, -62.97193280557255, -116.66326291895726, -216.24589925514084, -385.91560186873505, -661.44554287405299, -1136.8688319686166, -1936.8298374940005, -3265.534353839234]#, -5512.7965966917827, -9262.2443674361075, -15573.450979842701, -26166.836618951216, -43938.517069740832, -73658.42007931936, -123251.46427452395, -205780.66863290884, -342705.77471413859, -568899.95611399226, -940636.34302234743, -1547730.3166797124, -2531242.4332187474, -4108046.0363730192, -6601860.4045238644, -10473867.887020528, -16331914.758066893, -24860456.800170541, -36531467.495262146, -50774934.803152561, -63897570.021014214, -64208179.891168594, -21073342.647174835, 138977822.74478912, 583406277.63446045, 1681591158.2420044, 4230068699.5684204, 9918622133.9016113, 22288351830.98999, 48690570701.521484, 104274837686.24805, 220079682744.5293, 459399688201.30859, 950817030684.1875, 1954734386162.5781, 3997169136092.6875, 8138441468010.25, 16512146398211.75, 33405269630898.75, 67421040196892.5, 135806968569406.0, 273110678384144.0, 548482796851976.0, 1100251221615160.0, 2204983090942624.0, 4415395972560576.0, 8835688091025728.0, 17671102513245440.0, 35324675131617536.0, 70585655222816768.0, 1.4099566982061261e+17, 2.8155882196018586e+17, 5.6211596798247322e+17, 1.1219990179503473e+18, 2.2391470432681492e+18, 4.467946968404394e+18, 8.914121256392065e+18, 1.7782898680834294e+19, 3.5472119197490741e+19, 7.0751927115258003e+19, 1.4111105765679825e+20, 2.8142311074318988e+20, 5.6122635695810203e+20, 1.1191776760597735e+21, 2.2317488683335119e+21, 4.4501959810856643e+21, 8.8736514999064472e+21, 1.7693616845830861e+22, 3.527956698450078e+22, 7.0343407851191142e+22, 1.4025490928131429e+23, 2.7964565660988274e+23, 5.5756323498824136e+23, 1.1116723971202415e+24, 2.2164435001143682e+24, 4.4191026374805613e+24, 8.8106806127367846e+24, 1.7566412828067207e+25, 3.5023152214330072e+25, 6.9827440307321152e+25, 1.3921817826264976e+26, 2.7756510445876484e+26, 5.5339217813984774e+26, 1.1033175206920076e+27, 2.1997202843820748e+27, 4.3856496447048212e+27, 8.7437958688393867e+27, 1.7432743780876274e+28, 3.4756112687001539e+28]
    #q_nxt1 = [1.764052345967664, 5.4186136839468304, 10.791678496326373, 22.437426776553266, 46.517208703258525, 90.697742739002706, 183.96079288186218, 369.78180749101756, 738.87906567600101, 1478.6132047379374]#, 2954.1134616433392, 5901.3492373275003, 11784.618555598416, 23529.546973918048, 46970.3345024839, 93744.756526101104, 187069.73081054923, 373249.30179746688, 744638.94025944197, 1485418.3299863294, 2962890.5691385111, 5909516.5299366415, 11785880.727384433, 23504446.63453456, 46872620.011263356, 93470054.627442271, 186385543.95272636, 371655428.79614949, 741069590.52121401, 1477642036.977603, 2946269474.3458385, 5874484189.003479, 11712833177.411333, 23353387522.260033, 46562272972.436447, 92835775160.580185, 185094681394.40726, 369037316956.68762, 735774509699.86072, 1466957686316.0391, 2924752182690.2197, 5831219695431.5869, 11625958082842.184, 23179137309516.172, 46213097233505.68, 92136621589713.75, 183695696292488.03, 366239554187682.31, 730182036439337.75, 1455783291114475.2, 2902431987116627.0, 5786649106796036.0, 11536977722988988.0, 23001533857890548.0, 45858664640094888.0, 91429405122053728.0, 1.8228472808622438e+17, 3.6342482613191904e+17, 7.2456746062378394e+17, 1.4445846678375122e+18, 2.8800970631170022e+18, 5.7421059793858888e+18, 1.144814828860433e+19, 2.2824394083260957e+19, 4.5505431978233684e+19, 9.0725047238708232e+19, 1.8088024822068553e+20, 3.6062436957641179e+20, 7.1898359858237735e+20, 1.4334511048715411e+21, 2.8578983259275012e+21, 5.6978453286469029e+21, 1.1359900580121904e+22, 2.2648445496442789e+22, 4.5154627336353964e+22, 9.0025620059192035e+22, 1.7948575096974473e+23, 3.5784407310281072e+23, 7.1344036597900225e+23, 1.42239928333156e+24, 2.8358638067733718e+24, 5.6539141957309587e+24, 1.1272313414092992e+25, 2.2473819898742129e+25, 4.4806470607555397e+25, 8.9331489412653111e+25, 1.7810184286144585e+26, 3.5508493806741605e+26, 7.0793940738901212e+26, 1.4114318865472699e+27, 2.813997847609154e+27, 5.6103195315188413e+27, 1.1185397761680534e+28, 2.2300534277518025e+28, 4.4460987390358242e+28, 8.8642692339474624e+28, 1.7672857405632341e+29, 3.5234702438574263e+29, 7.024807744151893e+29]


    #add new data here for x and y 
    #good data for x but it says q

    x1 = [0.000000000000000000e+00,
    0.000000000000000000e+00,
    1.000000000000000021e-03,
    2.000000000000000042e-03,
    5.000000000000000104e-03,
    7.000000000000000146e-03,
    1.000000000000000021e-02,
    1.400000000000000029e-02,
    1.700000000000000122e-02,
    2.100000000000000130e-02,
    2.599999999999999881e-02,
    2.999999999999999889e-02,
    3.500000000000000333e-02,
    3.899999999999999994e-02,
    4.399999999999999745e-02,
    4.900000000000000189e-02,
    5.399999999999999939e-02,
    5.899999999999999689e-02,
    6.400000000000000133e-02,
    6.900000000000000577e-02,
    7.399999999999999634e-02,
    7.900000000000000078e-02,
    8.400000000000000522e-02,
    8.899999999999999578e-02,
    9.400000000000000022e-02,
    9.900000000000000466e-02,
    1.039999999999999952e-01,
    1.089999999999999997e-01,
    1.140000000000000041e-01,
    1.189999999999999947e-01,
    1.239999999999999991e-01,
    1.300000000000000044e-01,
    1.350000000000000089e-01,
    1.400000000000000133e-01,
    1.449999999999999900e-01,
    1.499999999999999944e-01,
    1.549999999999999989e-01,
    1.600000000000000033e-01,
    1.650000000000000078e-01,
    1.700000000000000122e-01,
    1.749999999999999889e-01,
    1.789999999999999925e-01,
    1.839999999999999969e-01,
    1.890000000000000013e-01,
    1.940000000000000058e-01,
    1.990000000000000102e-01,
    2.039999999999999869e-01,
    2.089999999999999913e-01,
    2.139999999999999958e-01,
    2.179999999999999993e-01,
    2.230000000000000038e-01,
    2.280000000000000082e-01,
    2.330000000000000127e-01,
    2.379999999999999893e-01,
    2.419999999999999929e-01,
    2.469999999999999973e-01,
    2.520000000000000018e-01,
    2.560000000000000053e-01]



    #one off
    ux1 = [ 8.439999999999999503e+00,
    7.120000000000000107e+00,
    6.000000000000000000e+00,
    5.049999999999999822e+00,
    4.240000000000000213e+00,
    3.569999999999999840e+00,
    2.990000000000000213e+00,
    2.509999999999999787e+00,
    2.089999999999999858e+00,
    1.750000000000000000e+00,
    1.449999999999999956e+00,
    1.199999999999999956e+00,
    9.899999999999999911e-01,
    8.100000000000000533e-01,
    6.600000000000000311e-01,
    5.400000000000000355e-01,
    4.299999999999999933e-01,
    3.400000000000000244e-01,
    2.600000000000000089e-01,
    2.000000000000000111e-01,
    1.400000000000000133e-01,
    8.999999999999999667e-02,
    5.000000000000000278e-02,
    2.000000000000000042e-02,
    -1.000000000000000021e-02,
    -2.999999999999999889e-02,
    -5.000000000000000278e-02,
    -7.000000000000000666e-02,
    -8.000000000000000167e-02,
    -8.999999999999999667e-02,
    -1.000000000000000056e-01,
    -1.100000000000000006e-01,
    -1.199999999999999956e-01,
    -1.199999999999999956e-01,
    -1.300000000000000044e-01,
    -1.300000000000000044e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01]



    #x_nxt
    x_nxt1 = [
    0.000000000000000000e+00,
    0.000000000000000000e+00,
    1.000000000000000021e-03,
    2.000000000000000042e-03,
    5.000000000000000104e-03,
    7.000000000000000146e-03,
    1.000000000000000021e-02,
    1.400000000000000029e-02,
    1.700000000000000122e-02,
    2.100000000000000130e-02,
    2.599999999999999881e-02,
    2.999999999999999889e-02,
    3.500000000000000333e-02,
    3.899999999999999994e-02,
    4.399999999999999745e-02,
    4.900000000000000189e-02,
    5.399999999999999939e-02,
    5.899999999999999689e-02,
    6.400000000000000133e-02,
    6.900000000000000577e-02,
    7.399999999999999634e-02,
    7.900000000000000078e-02,
    8.400000000000000522e-02,
    8.899999999999999578e-02,
    9.400000000000000022e-02,
    9.900000000000000466e-02,
    1.039999999999999952e-01,
    1.089999999999999997e-01,
    1.140000000000000041e-01,
    1.189999999999999947e-01,
    1.239999999999999991e-01,
    1.300000000000000044e-01,
    1.350000000000000089e-01,
    1.400000000000000133e-01,
    1.449999999999999900e-01,
    1.499999999999999944e-01,
    1.549999999999999989e-01,
    1.600000000000000033e-01,
    1.650000000000000078e-01,
    1.700000000000000122e-01,
    1.749999999999999889e-01,
    1.789999999999999925e-01,
    1.839999999999999969e-01,
    1.890000000000000013e-01,
    1.940000000000000058e-01,
    1.990000000000000102e-01,
    2.039999999999999869e-01,
    2.089999999999999913e-01,
    2.139999999999999958e-01,
    2.179999999999999993e-01,
    2.230000000000000038e-01,
    2.280000000000000082e-01,
    2.330000000000000127e-01,
    2.379999999999999893e-01,
    2.419999999999999929e-01,
    2.469999999999999973e-01,
    2.520000000000000018e-01,
    2.560000000000000053e-01]


    uy1 = [8.439999999999999503e+00,
    7.120000000000000107e+00,
    6.000000000000000000e+00,
    5.049999999999999822e+00,
    4.240000000000000213e+00,
    3.569999999999999840e+00,
    2.990000000000000213e+00,
    2.509999999999999787e+00,
    2.089999999999999858e+00,
    1.750000000000000000e+00,
    1.449999999999999956e+00,
    1.199999999999999956e+00,
    9.899999999999999911e-01,
    8.100000000000000533e-01,
    6.600000000000000311e-01,
    5.400000000000000355e-01,
    4.299999999999999933e-01,
    3.400000000000000244e-01,
    2.600000000000000089e-01,
    2.000000000000000111e-01,
    1.400000000000000133e-01,
    8.999999999999999667e-02,
    5.000000000000000278e-02,
    2.000000000000000042e-02,
    -1.000000000000000021e-02,
    -2.999999999999999889e-02,
    -5.000000000000000278e-02,
    -7.000000000000000666e-02,
    -8.000000000000000167e-02,
    -8.999999999999999667e-02,
    -1.000000000000000056e-01,
    -1.100000000000000006e-01,
    -1.199999999999999956e-01,
    -1.199999999999999956e-01,
    -1.300000000000000044e-01,
    -1.300000000000000044e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.499999999999999944e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.400000000000000133e-01,
    -1.300000000000000044e-01,
    -1.300000000000000044e-01,
    -1.300000000000000044e-01,
    -1.300000000000000044e-01,
    -1.300000000000000044e-01,
    -1.300000000000000044e-01,
    -1.300000000000000044e-01,
    -1.300000000000000044e-01,
    -1.300000000000000044e-01,
    -1.300000000000000044e-01,
    -1.300000000000000044e-01,
    -1.300000000000000044e-01,
    -1.300000000000000044e-01,
    -1.300000000000000044e-01,
    ]

    y1 = [0.000000000000000000e+00,
    8.400000000000000522e-02,
    1.559999999999999998e-01,
    2.159999999999999976e-01,
    2.660000000000000142e-01,
    3.079999999999999960e-01,
    3.439999999999999725e-01,
    3.739999999999999991e-01,
    3.990000000000000213e-01,
    4.199999999999999845e-01,
    4.369999999999999996e-01,
    4.520000000000000129e-01,
    4.640000000000000235e-01,
    4.739999999999999769e-01,
    4.819999999999999840e-01,
    4.889999999999999902e-01,
    4.939999999999999947e-01,
    4.979999999999999982e-01,
    5.020000000000000018e-01,
    5.040000000000000036e-01,
    5.060000000000000053e-01,
    5.080000000000000071e-01,
    5.090000000000000080e-01,
    5.090000000000000080e-01,
    5.090000000000000080e-01,
    5.090000000000000080e-01,
    5.090000000000000080e-01,
    5.090000000000000080e-01,
    5.080000000000000071e-01,
    5.070000000000000062e-01,
    5.060000000000000053e-01,
    5.050000000000000044e-01,
    5.040000000000000036e-01,
    5.030000000000000027e-01,
    5.020000000000000018e-01,
    5.000000000000000000e-01,
    4.989999999999999991e-01,
    4.979999999999999982e-01,
    4.959999999999999964e-01,
    4.949999999999999956e-01,
    4.929999999999999938e-01,
    4.919999999999999929e-01,
    4.909999999999999920e-01,
    4.889999999999999902e-01,
    4.879999999999999893e-01,
    4.859999999999999876e-01,
    4.849999999999999867e-01,
    4.829999999999999849e-01,
    4.819999999999999840e-01,
    4.799999999999999822e-01,
    4.789999999999999813e-01,
    4.769999999999999796e-01,
    4.759999999999999787e-01,
    4.739999999999999769e-01,
    4.729999999999999760e-01,
    4.709999999999999742e-01,
    4.699999999999999734e-01,
    4.680000000000000271e-01,
    4.670000000000000262e-01,
    4.650000000000000244e-01,
    4.640000000000000235e-01,
    4.630000000000000226e-01,
    4.610000000000000209e-01,
    4.600000000000000200e-01,
    4.580000000000000182e-01,
    4.570000000000000173e-01,
    4.550000000000000155e-01,
    4.540000000000000147e-01,
    4.520000000000000129e-01,
    4.510000000000000120e-01,
    4.500000000000000111e-01,
    4.480000000000000093e-01,
    4.470000000000000084e-01,
    4.450000000000000067e-01,
    4.440000000000000058e-01,
    4.430000000000000049e-01,
    4.410000000000000031e-01,
    4.400000000000000022e-01,
    4.380000000000000004e-01,
    4.369999999999999996e-01,
    4.359999999999999987e-01,
    4.339999999999999969e-01,
    4.329999999999999960e-01,
    4.319999999999999951e-01,
    4.299999999999999933e-01,
    4.289999999999999925e-01,
    4.279999999999999916e-01,
    4.259999999999999898e-01,
    4.249999999999999889e-01,
    4.239999999999999880e-01,
    4.219999999999999862e-01,
    4.209999999999999853e-01,
    4.199999999999999845e-01,
    4.179999999999999827e-01,
    4.169999999999999818e-01,
    4.159999999999999809e-01,
    4.139999999999999791e-01,
    4.129999999999999782e-01,
    4.119999999999999774e-01,
    ]

    y_nxt1 = [0.000000000000000000e+00,
    8.400000000000000522e-02,
    1.559999999999999998e-01,
    2.159999999999999976e-01,
    2.660000000000000142e-01,
    3.079999999999999960e-01,
    3.439999999999999725e-01,
    3.739999999999999991e-01,
    3.990000000000000213e-01,
    4.199999999999999845e-01,
    4.369999999999999996e-01,
    4.520000000000000129e-01,
    4.640000000000000235e-01,
    4.739999999999999769e-01,
    4.819999999999999840e-01,
    4.889999999999999902e-01,
    4.939999999999999947e-01,
    4.979999999999999982e-01,
    5.020000000000000018e-01,
    5.040000000000000036e-01,
    5.060000000000000053e-01,
    5.080000000000000071e-01,
    5.090000000000000080e-01,
    5.090000000000000080e-01,
    5.090000000000000080e-01,
    5.090000000000000080e-01,
    5.090000000000000080e-01,
    5.090000000000000080e-01,
    5.080000000000000071e-01,
    5.070000000000000062e-01,
    5.060000000000000053e-01,
    5.050000000000000044e-01,
    5.040000000000000036e-01,
    5.030000000000000027e-01,
    5.020000000000000018e-01,
    5.000000000000000000e-01,
    4.989999999999999991e-01,
    4.979999999999999982e-01,
    4.959999999999999964e-01,
    4.949999999999999956e-01,
    4.929999999999999938e-01,
    4.919999999999999929e-01,
    4.909999999999999920e-01,
    4.889999999999999902e-01,
    4.879999999999999893e-01,
    4.859999999999999876e-01,
    4.849999999999999867e-01,
    4.829999999999999849e-01,
    4.819999999999999840e-01,
    4.799999999999999822e-01,
    4.789999999999999813e-01,
    4.769999999999999796e-01,
    4.759999999999999787e-01,
    4.739999999999999769e-01,
    4.729999999999999760e-01,
    4.709999999999999742e-01,
    4.699999999999999734e-01,
    4.680000000000000271e-01,
    4.670000000000000262e-01,
    4.650000000000000244e-01,
    4.640000000000000235e-01,
    4.630000000000000226e-01,
    4.610000000000000209e-01,
    4.600000000000000200e-01,
    4.580000000000000182e-01,
    4.570000000000000173e-01,
    4.550000000000000155e-01,
    4.540000000000000147e-01,
    4.520000000000000129e-01,
    4.510000000000000120e-01,
    4.500000000000000111e-01,
    4.480000000000000093e-01,
    4.470000000000000084e-01,
    4.450000000000000067e-01,
    4.440000000000000058e-01,
    4.430000000000000049e-01,
    4.410000000000000031e-01,
    4.400000000000000022e-01,
    4.380000000000000004e-01,
    4.369999999999999996e-01,
    4.359999999999999987e-01,
    4.339999999999999969e-01,
    4.329999999999999960e-01,
    4.319999999999999951e-01,
    4.299999999999999933e-01,
    4.289999999999999925e-01,
    4.279999999999999916e-01,
    4.259999999999999898e-01,
    4.249999999999999889e-01,
    4.239999999999999880e-01,
    4.219999999999999862e-01,
    4.209999999999999853e-01,
    4.199999999999999845e-01,
    4.179999999999999827e-01,
    4.169999999999999818e-01,
    4.159999999999999809e-01,
    4.139999999999999791e-01,
    4.129999999999999782e-01,
    4.119999999999999774e-01,]

    if(param == "x"):
        q1 = x1
        u1 = ux1
        q_nxt1 = x_nxt1
    else:
        q1 = y1
        u1 = uy1
        q_nxt1 = y_nxt1
    
    #trains on data file read in and then learns from q,q1 and u
    #so you want to change q,q1 and u

    for index in range(58):
    #implementing dynamics for linear regression as discussed
       q =  np.array([0.,0.,0.,0.]) #x,y,dx,dy
       qf  =  np.array([.5682151,   0.5682151,   0.36304926,  0.36304926]) #x,y,dx,dy
     
       #u = compute_ctrl(q0=q, qf=qf, dynamics=dynamics)
       #q_nxt = dynamics.compute_nxt_state(q=q , u=u, disturb=False)       
       #print("q next =", q_nxt)

       xs = q1[index] 
       ys = u1[index] 
       #X_nxt = q_nxt1[index]
       X_nxt = array([1.0,   ((xs - mean_r[0]) / std_r[0]), ((ys - mean_r[1]) / std_r[1])]).dot(theta)
       zs = X_nxt 
       x_nxt_new.append(X_nxt)
       print('Predicted next position of', (param),', %f' % (X_nxt ), 'Actual is, %f' % (q_nxt1[index]))
       ax.scatter(xs , ys , zs )#, c=c, marker=m)

    #print(x_nxt_new)
   
    if(param == 'x'):
        np.savetxt('x_plot.txt', x_nxt_new)
    
    if(param == 'y'):
        np.savetxt('y_plot.txt', x_nxt_new)
        
    ax.set_xlabel('X')
    ax.set_ylabel('U')
    ax.set_zlabel('X_NXT')

    #plt.show()
    #print(q_nxt)
    
    #Apply Linear regression to this example 
    #Multivariate or singular 
    #Learn and apply example multivariate

    #end LR

def plotter():

    x = loadtxt('x_plot.txt', delimiter=',')
    y = loadtxt('y_plot.txt', delimiter=',')
    print(len(x),len(y))
   


    start =  np.array([0.,0.,0.,0.]) #x,y,dx,dy
    goal  =  np.array([.3682151,   0.3682151,   0.26304926,  0.26304926]) #x,y,dx,dy
    plt.clf()
    #plt.subplot(221)
    plt.scatter(start[0], start[1], color='r')
    plt.scatter(goal[0],  goal[1],  color='g')

    plt.plot(x, y, color='b')
    plt.xlim([-0.1, 1.])
    plt.ylim([-0.1, 1.])
    plt.xlabel("X location")
    plt.ylabel("Y location")
    plt.show()



def main():
    start =  np.array([0.,0.,0.,0.]) #x,y,dx,dy
    goal  =  np.array([.4682151,   0.4682151,   0.26304926,  0.26304926]) #x,y,dx,dy

    total_data_points = 100

    time_steps = 100

    '''
    This is a dyanmics object of class Dynamics
    '''
    q  = start.copy()
    qf = goal.copy()

    dynamics = Dynamics()
       

    data = []
    q_array = []
    u_array_x= []
    u_array_y= []
    q_nxt_array = []
    x_array = []
    y_array = []

    q_nxt_x = []
    q_nxt_y = []
    q_x = []
    q_y = []


    point_mass_trajectory = np.zeros([4, time_steps])
    point_mass_trajectory[point_mass_trajectory==0.] = np.nan
    point_mass_trajectory[:, 0] = start
    
    error_list = np.asarray([np.nan for _ in range(time_steps)])

    error_list[0] = np.linalg.norm(start-goal)
   
    for t in range(1, time_steps):

        u = compute_ctrl(q0=q, qf=qf, dynamics=dynamics)
        
        '''
        the first is the ideal case where the system is able to compute the
        right control command to take it from start to goal
        '''
        #Faulty with non-linear term
        #q_nxt = dynamics.compute_nxt_state(q=q + [np.random.randn() * 0.01,np.random.randn() * 0.01,np.random.randn() * 0.01,np.random.randn() * 0.01], u=u, disturb=False)
            
        ##Perfect model
        q_nxt = dynamics.compute_nxt_state(q=q , u=u, disturb=False)
        
        #print("q u")
        #print(u)
#       print(round(u,3))

 #       print(round(u[0],3))
        u_array_x.append(round(u[0],2))

        u_array_y.append(round(u[1],2))




        #print("q x")
        #print(round(q[0],3))
        q_x.append(round(q[0],3))
        
        #print("q y")
        #print(round(q[2],3))
        q_y.append(round(q[2],3))

        #q = q_nxt + np.random.randn(4)
        
        
        point_mass_trajectory[:, t] = q_nxt
        error_list[t] = np.linalg.norm(q_nxt-qf)
        

        #This appends to the q array all elements from position 0 of state
        #Elements 0,1 are the same
        #q_array.append(round(q[0],2))
        
        #print("q_nxt x")
        #print(round(q[0],3))
        q_nxt_x.append(round(q[0],3))


        #print("q_nxt y")
        #print(round(q[2],3))
        q_nxt_y.append(round(q[2],3))
        #print(round(q[0],7))
        #print(round(q[2],7))
        #print("u")
        #print(round(u[0],7))
        #print("q_nxt")
        #print(round(q_nxt[0],7))
        #print(round(q_nxt[1],7))
        #u_array.append(u[0])
        #q_nxt_array.append(q_nxt[0])
        x_array.append(round(q[0],2))
        y_array.append(round(q[2],2))
       

        q = q_nxt

        


        visualize(start, goal, point_mass_trajectory, error_list)
  
    a = np.asarray(q_array)

    #learning takes place 
    #learn for X
    file = 'datarealX.txt'
    fileError = 'datarealX.txt'
    learn(file, fileError, 'x')
    #learn for Y
    file = 'datarealY.txt'
    fileError = 'datarealX.txt'
    learn(file, fileError, 'y')
    #plot graph - this needs to take an array from the two learned methds above
    plotter()


if __name__ == '__main__':
    main()
